plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

def codeGenerationTaskGroup = 'code generation'
def generatedCodeDestinationPackageDirectory = 'org/eclipse/wst/xml/xpath2/processor/internal'

def generateJFlexTaskProvider = tasks.register('generateJFlex', JavaExec) {
    jFlexExec ->
        def outputDirectory = "$buildDir/jflex-generated"
        def classesDestinationDirectory = file("$outputDirectory/$generatedCodeDestinationPackageDirectory")
        def inputFile = file('src/main/jflex/xpath.lex')

        jFlexExec.group codeGenerationTaskGroup
        jFlexExec.classpath(configurations.named('jflex'))

        jFlexExec.inputs.file(inputFile)
        jFlexExec.outputs.dir("$outputDirectory")

        jFlexExec.workingDir = classesDestinationDirectory

        jFlexExec.args '-d', classesDestinationDirectory.absolutePath, inputFile.absolutePath

        jFlexExec.doFirst {
            classesDestinationDirectory.mkdirs()
        }
}

def generateJCupTaskProvider = tasks.register('generateJCup', JavaExec) {
    jCupExec ->
        def outputDirectory = "$buildDir/jcup-generated"
        def classesDestinationDirectory = file("$outputDirectory/$generatedCodeDestinationPackageDirectory")
        def inputFile = file('src/main/jcup/xpath.cup')

        jCupExec.group codeGenerationTaskGroup

        jCupExec.classpath(configurations.named('jcup'))
        jCupExec.main = 'java_cup.Main'

        jCupExec.workingDir = classesDestinationDirectory

        jCupExec.inputs.file(inputFile)
        jCupExec.outputs.dir("$outputDirectory")

        jCupExec.args '-symbols', 'XpathSym', '-parser', 'XPathCup', inputFile.absolutePath

        jCupExec.doFirst {
            classesDestinationDirectory.mkdirs()
        }
}

sourceSets.main.java {
    SourceDirectorySet sourceDirectorySet ->
        sourceDirectorySet.srcDir(generateJCupTaskProvider)
        sourceDirectorySet.srcDir(generateJFlexTaskProvider)
}

configurations {
    jflex
    jcup
    implementation.extendsFrom jcup
}

tasks.named('test', Test).configure {
    it.filter {
        // exclude test suites
        it.excludeTestsMatching('*.All*Tests')
        it.excludeTestsMatching('org.eclipse.wst.xml.xpath2.processor.conformancesuite.util.PsychopathTestContext')
    }

    it.useJUnitPlatform()
}

tasks.register('testSuite', Test).configure {
    it.filter {
        it.includeTestsMatching('*.All*Tests')
    }

    it.useJUnitPlatform()
}

dependencies {
    implementation 'xerces:xercesImpl:2.12.1'
    implementation 'com.ibm.icu:icu4j:68.2'
    jcup 'edu.princeton.cup:java-cup:10k'
    jflex 'de.jflex:jflex:1.4.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.1'
    testImplementation 'xmlunit:xmlunit:1.2'
}