name: 'Compile :: Test :: Publish (master/release)'
on:
  workflow_dispatch:
  push:
    branches: [ master, releases/** ]

jobs:
  validation:
    name: Validate Gradle wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

  compile:
    name: Compile sources
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
          distribution: 'temurin'
      - name: Compile sources
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean testClasses

  test:
    name: Run tests
    needs: compile
    runs-on: ubuntu-latest
    # TODO testResultsArtifactUrl: ?
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
          distribution: 'temurin'
      - name: Run tests
        continue-on-error: true
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
      - name: Create JUnit HTML test report artifact
        uses: actions/upload-artifact@v3
        with:
          name: junit-html-test-report
          path: build/reports/tests/test
      - name: Create JUnit XML test report artifact
        uses: actions/upload-artifact@v3
        with:
          name: junit-xml-test-report
          path: build/test-results/test

  publish_test_results_summary:
    name: Publish test results
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download XML test results artifact
        uses: actions/download-artifact@v3
        with:
          name: junit-xml-test-report
          path: junit-xml-test-report
      - name: Publish summary
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: junit-xml-test-report/**/*.xml
          check_name: Test results summary

  publish_html_test_report:
    name: Publish HTML test report
    needs: test
    runs-on: ubuntu-latest
    outputs:
      test_report_url: ${{ steps.generate_report_url.outputs.test_report_url }}
    steps:
      - name: Download XML test results artifact
        uses: actions/download-artifact@v3
        with:
          name: junit-html-test-report
          path: junit-html-test-report
      - name: Generate report path
        id: generate_report_path
        run: echo "test_report_path=test-results/${{ github.run_id }}/github.run_number" >> $GITHUB_OUTPUT
      - name: Publish report to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          external_repository: fingo/results-xactus
          deploy_key: ${{ secrets.XACTUS_RESULTS_TOKEN }}
          publish_dir: ./junit-html-test-report
          destination_dir: ${{ steps.generate_report_path.outputs.test_report_path }}
          keep_files: true
      - name: Generate report URL
        id: generate_report_url
        run: echo "test_report_url=https://fingo.github.io/results-xactus/${{ steps.generate_report_path.outputs.test_report_path }}/index.html" >> $GITHUB_OUTPUT
      - name: Log URL of the report
        run: "echo '::notice::jUnit HTML report is available at ${{ steps.generate_report_url.outputs.test_report_url }}'"

  publish:
    name: Publish artifacts to Sonatype
    needs: test
    runs-on: ubuntu-latest
    # todo link to published artifact in outputs
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        # we need to fetch tags in order for the Axion plugin to properly determine the current snapshot version
      - name: Fetch all tags
        run: git fetch --prune --unshallow --tags
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
          distribution: 'temurin'
          server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: ORG_GRADLE_PROJECT_ossrhUserName # env variable for username in deploy
          server-password: ORG_GRADLE_PROJECT_ossrhPassword # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: ORG_GRADLE_PROJECT_pgpSecretKeyPassword # env variable for GPG private key passphrase
      - name: Log publish version
        uses: gradle/gradle-build-action@v2
        with:
          arguments: currentVersion
      - name: Publish artifact
        uses: gradle/gradle-build-action@v2
        with:
          arguments: -i publishMavenJavaPublicationToOSSRHRepository
        env:
          ORG_GRADLE_PROJECT_ossrhUserName: ${{ secrets.OSSRH_USERNAME }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.OSSRH_TOKEN }}
          ORG_GRADLE_PROJECT_pgpSecretKey: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_pgpSecretKeyPassword: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  slack:
    name: Send out Slack notification
    runs-on: ubuntu-latest
    needs: [ test, publish, publish_html_test_report ]
    if: always()
    steps:
      - name: Send Slack message
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.XPATH_SLACK_URL }}
          SLACK_COLOR: "${{job.status}}"
          SLACK_ICON: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
          SLACK_USERNAME: "Github"
          SLACK_TITLE: "Summary"
          SLACK_MESSAGE: |
            *Commit message*
            ${{ github.event.head_commit.message }}
            
            *HTML test report browse URL*
            ${{ needs.publish_html_test_report.outputs.test_report_url }}
